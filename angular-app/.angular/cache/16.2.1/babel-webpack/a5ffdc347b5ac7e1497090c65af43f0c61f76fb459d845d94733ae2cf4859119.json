{"ast":null,"code":"var _class;\nimport { environment } from '../environments/environment';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n  }\n  loginStudent(email, password) {\n    const body = {\n      email,\n      password\n    };\n    const currentUser = this.submitStudentEmail(email);\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    return this.http.post(environment.api + `/auth/login`, body);\n  }\n  loginProfesor(email, password) {\n    const body = {\n      email,\n      password\n    };\n    const currentUser = this.submitProfesorEmail(email);\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    return this.http.post(environment.api + `/auth-profesor/login`, body);\n  }\n  submitStudentEmail(email) {\n    this.currentStudent = this.http.get(environment.api + `/student/email/${email}`).pipe(map(response => {\n      return response;\n    }));\n    return this.currentStudent;\n  }\n  submitProfesorEmail(email) {\n    this.currentProfesor = this.http.get(environment.api + `/profesor/email/${email}`).pipe(map(response => {\n      return response;\n    }));\n    return this.currentProfesor;\n  }\n  getCurretProfesor() {\n    return this.currentProfesor;\n  }\n  getCurretStudent() {\n    return this.currentProfesor;\n  }\n}\n_class = AuthenticationService;\n_class.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","map","AuthenticationService","constructor","http","loginStudent","email","password","body","currentUser","submitStudentEmail","localStorage","setItem","JSON","stringify","post","api","loginProfesor","submitProfesorEmail","currentStudent","get","pipe","response","currentProfesor","getCurretProfesor","getCurretStudent","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\auth\\authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  currentStudent:any;\n  currentProfesor:any;\n\n  constructor(private http: HttpClient) {}\n\n  loginStudent(email: string, password: string) {\n    const body = { email, password };\n    const currentUser = this.submitStudentEmail(email);\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    return this.http.post(environment.api+`/auth/login`, body);\n  }\n\n  loginProfesor(email: string, password: string) {\n    const body = { email, password };\n    const currentUser = this.submitProfesorEmail(email);\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    return this.http.post(environment.api+`/auth-profesor/login`, body);\n  }\n\n  submitStudentEmail(email: string): Observable<any>  {\n    this.currentStudent=this.http.get(environment.api+`/student/email/${email}`).pipe(\n      map((response) => {\n        return response; \n      })\n    );\n    return this.currentStudent;\n  }\n\n  submitProfesorEmail(email: string): Observable<any> {\n    this.currentProfesor=this.http.get(environment.api+`/profesor/email/${email}`).pipe(\n      map((response) => {\n        return response; \n      })\n    );\n    return this.currentProfesor;\n  }\n\n  getCurretProfesor(){\n    return this.currentProfesor;\n  }\n\n  getCurretStudent(){\n    return this.currentProfesor;\n  }\n\n}\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,6BAA6B;AACzD,SAAqBC,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,YAAYA,CAACC,KAAa,EAAEC,QAAgB;IAC1C,MAAMC,IAAI,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAChC,MAAME,WAAW,GAAG,IAAI,CAACC,kBAAkB,CAACJ,KAAK,CAAC;IAClDK,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;IAChE,OAAO,IAAI,CAACL,IAAI,CAACW,IAAI,CAACf,WAAW,CAACgB,GAAG,GAAC,aAAa,EAAER,IAAI,CAAC;EAC5D;EAEAS,aAAaA,CAACX,KAAa,EAAEC,QAAgB;IAC3C,MAAMC,IAAI,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAChC,MAAME,WAAW,GAAG,IAAI,CAACS,mBAAmB,CAACZ,KAAK,CAAC;IACnDK,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;IAChE,OAAO,IAAI,CAACL,IAAI,CAACW,IAAI,CAACf,WAAW,CAACgB,GAAG,GAAC,sBAAsB,EAAER,IAAI,CAAC;EACrE;EAEAE,kBAAkBA,CAACJ,KAAa;IAC9B,IAAI,CAACa,cAAc,GAAC,IAAI,CAACf,IAAI,CAACgB,GAAG,CAACpB,WAAW,CAACgB,GAAG,GAAC,kBAAkBV,KAAK,EAAE,CAAC,CAACe,IAAI,CAC/EpB,GAAG,CAAEqB,QAAQ,IAAI;MACf,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;IACD,OAAO,IAAI,CAACH,cAAc;EAC5B;EAEAD,mBAAmBA,CAACZ,KAAa;IAC/B,IAAI,CAACiB,eAAe,GAAC,IAAI,CAACnB,IAAI,CAACgB,GAAG,CAACpB,WAAW,CAACgB,GAAG,GAAC,mBAAmBV,KAAK,EAAE,CAAC,CAACe,IAAI,CACjFpB,GAAG,CAAEqB,QAAQ,IAAI;MACf,OAAOA,QAAQ;IACjB,CAAC,CAAC,CACH;IACD,OAAO,IAAI,CAACC,eAAe;EAC7B;EAEAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACD,eAAe;EAC7B;EAEAE,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,eAAe;EAC7B;;SA7CWrB,qBAAqB;;mBAArBA,MAAqB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAArB3B,MAAqB;EAAA4B,OAAA,EAArB5B,MAAqB,CAAA6B,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}