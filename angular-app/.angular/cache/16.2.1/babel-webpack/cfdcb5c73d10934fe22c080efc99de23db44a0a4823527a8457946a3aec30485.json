{"ast":null,"code":"var _class;\nimport { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/prisustvo/prisustvo.service\";\nconst _c0 = [\"canvas\"];\nChart.register(...registerables);\nexport class ChartComponent {\n  constructor(prisustvoService) {\n    this.prisustvoService = prisustvoService;\n    this.podaci = [];\n    this.chartInstance = null;\n  }\n  ngOnInit() {\n    if (!this.newPredmetValue) {\n      this.newPredmetValue = this.idPredmeta;\n    }\n  }\n  ngOnChanges(changes) {\n    if ('idPredmeta' in changes) {\n      this.newPredmetValue = changes['idPredmeta'].currentValue;\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n      }\n      this.create();\n    }\n  }\n  ngAfterViewInit() {}\n  create() {\n    this.prisustvoService.posecenostNaCasovima(this.newPredmetValue).subscribe(data => {\n      this.podaci = data.map(item => ({\n        cas_id: item.cas_id,\n        casCount: item.casCount\n      }));\n      let last10CasIds = [];\n      let last10CasCounts = [];\n      const numberOfItemsToTake = 10;\n      if (this.podaci.length >= numberOfItemsToTake) {\n        last10CasIds = this.podaci.slice(-numberOfItemsToTake).map(item => item.cas_id.toString());\n        last10CasCounts = this.podaci.slice(-numberOfItemsToTake).map(item => item.casCount);\n      } else {\n        last10CasIds = [...this.podaci.map(item => item.cas_id.toString()), ...Array(numberOfItemsToTake - this.podaci.length).fill('')];\n        last10CasCounts = [...this.podaci.map(item => item.casCount), ...Array(numberOfItemsToTake - this.podaci.length).fill(0)];\n      }\n      // Destroy previous chart instance if it exists\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n      }\n      this.chartInstance = new Chart(this.canvas.nativeElement.getContext('2d'), {\n        type: 'bar',\n        data: {\n          labels: last10CasIds,\n          datasets: [{\n            label: 'Broj studenata na časovima',\n            data: last10CasCounts,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: this.brojStudenata,\n              ticks: {\n                stepSize: 1 // This ensures only whole numbers are displayed\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n}\n_class = ChartComponent;\n_class.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.PrisustvoService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-chart\"]],\n  viewQuery: function ChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  inputs: {\n    idPredmeta: \"idPredmeta\",\n    brojStudenata: \"brojStudenata\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[\"id\", \"divChart\"], [\"canvas\", \"\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", null, 1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#divChart[_ngcontent-%COMP%]{\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 5%;\\n    width: 90%;\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9mZXNvci1zdHJhbmEvY2hhcnQvY2hhcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLFdBQVc7SUFDWCxVQUFVO0lBQ1YsWUFBWTtBQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIiNkaXZDaGFydHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiA1JTtcclxuICAgIHdpZHRoOiA5MCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["Chart","registerables","register","ChartComponent","constructor","prisustvoService","podaci","chartInstance","ngOnInit","newPredmetValue","idPredmeta","ngOnChanges","changes","currentValue","destroy","create","ngAfterViewInit","posecenostNaCasovima","subscribe","data","map","item","cas_id","casCount","last10CasIds","last10CasCounts","numberOfItemsToTake","length","slice","toString","Array","fill","canvas","nativeElement","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","max","brojStudenata","ticks","stepSize","i0","ɵɵdirectiveInject","i1","PrisustvoService","selectors","viewQuery","ChartComponent_Query","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\components\\profesor-strana\\chart\\chart.component.ts","C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\components\\profesor-strana\\chart\\chart.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport { PrisustvoService } from 'src/app/services/prisustvo/prisustvo.service';\nChart.register(...registerables);\n\ninterface CasData {\n  cas_id: number;\n  casCount: number;\n}\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css'],\n})\n\nexport class ChartComponent implements AfterViewInit, OnInit, OnChanges {\n\n  @Input() idPredmeta!: number;\n  @Input() brojStudenata!:number;\n  podaci: CasData[] = [];\n  newPredmetValue!: number;\n  @ViewChild('canvas') canvas!: ElementRef;\n  private chartInstance: Chart | null = null;\n\n  constructor(private prisustvoService: PrisustvoService) {}\n\n  ngOnInit() {\n    if (!this.newPredmetValue) {\n      this.newPredmetValue = this.idPredmeta;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('idPredmeta' in changes) {\n      this.newPredmetValue = changes['idPredmeta'].currentValue;\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n      }\n      this.create();\n    }\n  }\n\n  ngAfterViewInit() {}\n\n  create() {\n    this.prisustvoService.posecenostNaCasovima(this.newPredmetValue).subscribe((data) => {\n      this.podaci = data.map((item) => ({\n        cas_id: item.cas_id,\n        casCount: item.casCount\n      }));\n\n      let last10CasIds: string[] = [];\n      let last10CasCounts: number[] = [];\n      const numberOfItemsToTake = 10;\n\n      if (this.podaci.length >= numberOfItemsToTake) {\n        last10CasIds = this.podaci.slice(-numberOfItemsToTake).map((item) => item.cas_id.toString());\n        last10CasCounts = this.podaci.slice(-numberOfItemsToTake).map((item) => item.casCount);\n      } else {\n        last10CasIds = [...this.podaci.map((item) => item.cas_id.toString()), ...Array(numberOfItemsToTake - this.podaci.length).fill('')];\n        last10CasCounts = [\n          ...this.podaci.map((item) => item.casCount),\n          ...Array(numberOfItemsToTake - this.podaci.length).fill(0)\n        ];\n      }\n\n      // Destroy previous chart instance if it exists\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n      }\n\n      this.chartInstance = new Chart(this.canvas.nativeElement.getContext('2d'), {\n        type: 'bar',\n        data: {\n          labels: last10CasIds,\n          datasets: [{\n            label: 'Broj studenata na časovima',\n            data: last10CasCounts,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: this.brojStudenata, \n              ticks: {\n                stepSize: 1, // This ensures only whole numbers are displayed\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  // @Input() idPredmeta!: number;\n  // podaci:CasData[]=[];\n  // constructor(private prisustvoService:PrisustvoService){}\n  // myChart=[];\n  // newPredmetValue!:number;\n\n  // @ViewChild('canvas') canvas!: ElementRef;\n  // private chartInstance: Chart | null = null;\n\n\n  // ngOnInit() {\n  //   if(!this.newPredmetValue){\n  //     this.newPredmetValue=this.idPredmeta;\n  //   }\n  // }\n\n  //   ngOnChanges(changes: SimpleChanges) {\n  //   if ('idPredmeta' in changes) {\n  //     // Ovde možete reagovati na promenu vrednosti tmp\n  //     this.newPredmetValue = changes['idPredmeta'].currentValue;\n  //     this.create();\n  //   }\n  // }\n\n  // ngAfterViewInit(){}\n\n  // create(){\n\n  //  this.prisustvoService.posecenostNaCasovima(this.newPredmetValue).subscribe((data) => {\n  //     this.podaci = data.map((item) => ({\n  //       cas_id: item.cas_id,\n  //       casCount: item.casCount\n  //     }));\n      \n  //     let last10CasIds: string[] = [];\n  //     let last10CasCounts: number[] = []\n  //     const numberOfItemsToTake = 10;\n\n  //     if (this.podaci.length >= numberOfItemsToTake) {\n  //       last10CasIds = this.podaci.slice(-numberOfItemsToTake).map((item) => item.cas_id.toString());\n  //       last10CasCounts = this.podaci.slice(-numberOfItemsToTake).map((item) => item.casCount);\n  //     } else {\n  //       last10CasIds = [...this.podaci.map((item) => item.cas_id.toString()), ...Array(numberOfItemsToTake - this.podaci.length).fill('')];\n  //       last10CasCounts = [\n  //         ...this.podaci.map((item) => item.casCount),\n  //         ...Array(numberOfItemsToTake - this.podaci.length).fill(0)\n  //       ];\n  //     }\n\n  //     if (this.chartInstance) {\n  //     this.chartInstance.destroy();\n  //   }\n    \n\n  //     this.chartInstance = new Chart(this.canvas.nativeElement.getContext('2d'), {\n  //       type: 'bar',\n  //       data: {\n  //           labels: last10CasIds,\n  //           datasets: [{\n  //               label: '# of Votes',\n  //               data: last10CasCounts,\n  //               backgroundColor: //[\n  //                   'rgba(255, 99, 132, 0.2)'\n  //                   // ,\n  //                   // 'rgba(54, 162, 235, 0.2)',\n  //                   // 'rgba(255, 206, 86, 0.2)',\n  //                   // 'rgba(75, 192, 192, 0.2)',\n  //                   // 'rgba(153, 102, 255, 0.2)',\n  //                   // 'rgba(255, 159, 64, 0.2)'\n  //               //]\n  //               ,\n  //               borderColor: //[\n  //                   'rgba(255, 99, 132, 1)'\n  //                   // ,\n  //                   // 'rgba(54, 162, 235, 1)',\n  //                   // 'rgba(255, 206, 86, 1)',\n  //                   // 'rgba(75, 192, 192, 1)',\n  //                   // 'rgba(153, 102, 255, 1)',\n  //                   // 'rgba(255, 159, 64, 1)'\n  //             // ]\n  //               ,\n  //               borderWidth: 1\n  //           }]\n  //         },\n  //         options: {\n  //             scales: {\n  //                 y: {\n  //                     beginAtZero: true\n  //                 }\n  //             }\n  //         }\n  //     });\n  //     });\n   \n  //}\n}\n","<div id=\"divChart\">\r\n    <canvas #canvas></canvas>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}