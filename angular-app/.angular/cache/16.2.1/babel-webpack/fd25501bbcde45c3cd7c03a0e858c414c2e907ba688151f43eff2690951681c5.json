{"ast":null,"code":"var _class;\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authTokenKey = 'authToken';\n  }\n  login(token) {\n    localStorage.setItem(this.authTokenKey, token);\n  }\n  logout() {\n    localStorage.removeItem(this.authTokenKey);\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem(this.authTokenKey);\n  }\n  loginStudent(email, password) {\n    return this.http.post('/auth/login/student', {\n      email,\n      password\n    }).pipe(tap(response => {\n      // Čuvanje JWT tokena na klijentskoj strani (primer koristi localStorage)\n      localStorage.setItem('token', response.access_token);\n    }));\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["tap","AuthService","constructor","http","authTokenKey","login","token","localStorage","setItem","logout","removeItem","isLoggedIn","getItem","loginStudent","email","password","post","pipe","response","access_token","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private authTokenKey = 'authToken';\n\n    constructor(private http: HttpClient) {}\n\n  login(token: string): void {\n    localStorage.setItem(this.authTokenKey, token);\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.authTokenKey);\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem(this.authTokenKey);\n  }\n\n  loginStudent(email: string, password: string) {\n    return this.http\n      .post<{ access_token: string }>('/auth/login/student', { email, password })\n      .pipe(\n        tap((response) => {\n          // Čuvanje JWT tokena na klijentskoj strani (primer koristi localStorage)\n          localStorage.setItem('token', response.access_token);\n        })\n      );\n  }\n}\n"],"mappings":";AAEA,SAASA,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,WAAW;EAGpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFlB,KAAAC,YAAY,GAAG,WAAW;EAEO;EAEzCC,KAAKA,CAACC,KAAa;IACjBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,YAAY,EAAEE,KAAK,CAAC;EAChD;EAEAG,MAAMA,CAAA;IACJF,YAAY,CAACG,UAAU,CAAC,IAAI,CAACN,YAAY,CAAC;EAC5C;EAEAO,UAAUA,CAAA;IACR,OAAO,CAAC,CAACJ,YAAY,CAACK,OAAO,CAAC,IAAI,CAACR,YAAY,CAAC;EAClD;EAEAS,YAAYA,CAACC,KAAa,EAAEC,QAAgB;IAC1C,OAAO,IAAI,CAACZ,IAAI,CACba,IAAI,CAA2B,qBAAqB,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC1EE,IAAI,CACHjB,GAAG,CAAEkB,QAAQ,IAAI;MACf;MACAX,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEU,QAAQ,CAACC,YAAY,CAAC;IACtD,CAAC,CAAC,CACH;EACL;;SA1BWlB,WAAW;;mBAAXA,MAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXtB,MAAW;EAAAuB,OAAA,EAAXvB,MAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}