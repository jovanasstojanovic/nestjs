{"ast":null,"code":"var _class;\nimport { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/prisustvo/prisustvo.service\";\nChart.register(...registerables);\nexport class ChartComponent {\n  constructor(prisustvoService) {\n    this.prisustvoService = prisustvoService;\n    this.podaci = [];\n  }\n  // @ViewChild('lineChart', { static: true }) private chartRef!: ElementRef;\n  ngOnInit() {\n    var myChart = new Chart(\"myChart\", {\n      type: 'bar',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n}\n_class = ChartComponent;\n_class.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.PrisustvoService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-chart\"]],\n  inputs: {\n    idPredmeta: \"idPredmeta\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"id\", \"divChart\"], [\"id\", \"myChart\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#divChart[_ngcontent-%COMP%]{\\n    display: block;\\n    width: 400px;\\n    height: 400px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcm9mZXNvci1zdHJhbmEvY2hhcnQvY2hhcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7SUFDZCxZQUFZO0lBQ1osYUFBYTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIiNkaXZDaGFydHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDQwMHB4O1xyXG4gICAgaGVpZ2h0OiA0MDBweDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["Chart","registerables","register","ChartComponent","constructor","prisustvoService","podaci","ngOnInit","myChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","i0","ɵɵdirectiveInject","i1","PrisustvoService","selectors","inputs","idPredmeta","decls","vars","consts","template","ChartComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\components\\profesor-strana\\chart\\chart.component.ts","C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\components\\profesor-strana\\chart\\chart.component.html"],"sourcesContent":["import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { Chart, ChartOptions, registerables } from 'chart.js';\nimport { PrisustvoService } from 'src/app/services/prisustvo/prisustvo.service';\nChart.register(...registerables);\n\ninterface CasData {\n  cas_id: number;\n  casCount: number;\n}\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css'],\n})\n\nexport class ChartComponent implements OnInit {\n\n  \n  @Input() idPredmeta!: number;\n  podaci:CasData[]=[];\n  constructor(private prisustvoService:PrisustvoService){}\n\n  // @ViewChild('lineChart', { static: true }) private chartRef!: ElementRef;\n  ngOnInit(): void {\n    \n   var myChart = new Chart(\"myChart\", {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            y: {\n                beginAtZero: true\n            }\n        }\n    }\n});\n  }\n\n//   getDataAndCreateChart() {\n//     this.prisustvoService.posecenostNaCasovima(this.idPredmeta).subscribe((data) => {\n//       this.podaci = data.map((item) => ({\n//         cas_id: item.cas_id,\n//         casCount: parseInt(item.casCount)\n//       }));\n\n      \n//       this.createLineChart();\n//     });\n//   }\n\n//   createLineChart() {\n\n//     const data = {\n//       labels: this.podaci.map((item) => item.cas_id.toString()), \n//       datasets: [\n//         {\n//           label: 'Cas Count',\n//           data: this.podaci.map((item) => item.casCount),\n//           borderColor: 'blue',\n//           fill: false\n//         }\n//       ]\n//     };\n\n\n    \n\n//     const options: ChartOptions<'line'>  = {\n//   plugins: {\n//     legend: {\n//       display: false \n//     }\n//   },\n//   scales: {\n//     x: {\n//       type: 'linear',\n//       title: {\n//         display: true,\n//         text: 'Cas ID' // Dodajte opcionalni naslov za x-osu\n//       }\n//     },\n//     y: {\n//       beginAtZero: true\n//     }\n//   }\n// };\n\n\n\n//     const ctx = this.chartRef.nativeElement.getContext('2d');\n\n//     const lineChart = new Chart(ctx, {\n//       type: 'line',\n//       data: data,\n//       options: options\n//     });\n\n//     return lineChart;\n//   }\n\n}\n","<div id=\"divChart\">\r\n<canvas id=\"myChart\"></canvas>\r\n</div>"],"mappings":";AACA,SAASA,KAAK,EAAgBC,aAAa,QAAQ,UAAU;;;AAE7DD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAahC,OAAM,MAAOE,cAAc;EAKzBC,YAAoBC,gBAAiC;IAAjC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IADpC,KAAAC,MAAM,GAAW,EAAE;EACoC;EAEvD;EACAC,QAAQA,CAAA;IAEP,IAAIC,OAAO,GAAG,IAAIR,KAAK,CAAC,SAAS,EAAE;MAClCS,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;QACFC,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAC9DC,QAAQ,EAAE,CAAC;UACPC,KAAK,EAAE,YAAY;UACnBH,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAC1BI,eAAe,EAAE,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,0BAA0B,EAC1B,yBAAyB,CAC5B;UACDC,WAAW,EAAE,CACT,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,wBAAwB,EACxB,uBAAuB,CAC1B;UACDC,WAAW,EAAE;SAChB;OACJ;MACDC,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,WAAW,EAAE;;;;KAI5B,CAAC;EACA;;SA5CWjB,cAAc;;mBAAdA,MAAc,EAAAkB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,gBAAA;AAAA;;QAAdrB,MAAc;EAAAsB,SAAA;EAAAC,MAAA;IAAAC,UAAA;EAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MChB3BZ,EAAA,CAAAc,cAAA,aAAmB;MACnBd,EAAA,CAAAe,SAAA,gBAA8B;MAC9Bf,EAAA,CAAAgB,YAAA,EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}