{"ast":null,"code":"var _class;\nimport { environment } from 'src/app/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CasService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAll() {\n    return this.httpClient.get(environment.api + '/student');\n  }\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}Z`;\n  }\n  createCas(sifra, prijava, ima) {\n    const myDate = new Date();\n    const vremePrijava = new Date(myDate.getTime() + prijava * 60000);\n    const requestBody = {\n      sifra: sifra,\n      prijava_do: this.formatDate(vremePrijava),\n      ima: ima\n    };\n    this.httpClient.post(environment.api + `/cas`, requestBody).subscribe(response => {\n      console.log('Čas je uspešno kreiran.', response);\n    });\n  }\n  pretraziCasovePoNazivu(nazivCasova) {\n    const url = environment.api + `/cas/pretrazi/${nazivCasova}`;\n    return this.http.get(url);\n  }\n}\n_class = CasService;\n_class.ɵfac = function CasService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","CasService","constructor","httpClient","getAll","get","api","formatDate","date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","createCas","sifra","prijava","ima","myDate","Date","vremePrijava","getTime","requestBody","prijava_do","post","subscribe","response","console","log","pretraziCasovePoNazivu","nazivCasova","url","http","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Windows\\System32\\nest+ng\\angular-app\\src\\app\\services\\cas\\cas.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/app/environments/environment';\nimport { Cas } from 'src/app/models/cas';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CasService {\n\n  constructor(private httpClient:HttpClient) { }\n\n  getAll(){\n    return this.httpClient.get<Cas[]>(environment.api+'/student');\n  }\n\n  formatDate(date: Date):string{\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n  const seconds = date.getSeconds().toString().padStart(2, '0');\n\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}Z`;\n};\n\n  createCas(sifra:string, prijava:number,ima:number){\n    const myDate: Date = new Date();\n  const vremePrijava: Date = new Date(myDate.getTime() + prijava * 60000);\n  \n  const requestBody = {\n    sifra: sifra,\n    prijava_do: this.formatDate(vremePrijava),\n    ima: ima,\n  };\n\n  this.httpClient.post(environment.api + `/cas`, requestBody).subscribe(\n    (response) => {\n      console.log('Čas je uspešno kreiran.', response);\n    }\n  );\n\n  }\n\n  pretraziCasovePoNazivu(nazivCasova: string): Observable<any> {\n    const url = environment.api + `/cas/pretrazi/${nazivCasova}`;\n    return this.http.get(url);\n  }\n\n\n}\n"],"mappings":";AAGA,SAASA,WAAW,QAAQ,kCAAkC;;;AAM9D,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,UAAqB;IAArB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAQL,WAAW,CAACM,GAAG,GAAC,UAAU,CAAC;EAC/D;EAEAC,UAAUA,CAACC,IAAU;IACrB,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,EAAE;IAC/B,MAAMC,KAAK,GAAG,CAACH,IAAI,CAACI,QAAQ,EAAE,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC/D,MAAMC,GAAG,GAAGP,IAAI,CAACQ,OAAO,EAAE,CAACH,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACtD,MAAMG,KAAK,GAAGT,IAAI,CAACU,QAAQ,EAAE,CAACL,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACzD,MAAMK,OAAO,GAAGX,IAAI,CAACY,UAAU,EAAE,CAACP,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC7D,MAAMO,OAAO,GAAGb,IAAI,CAACc,UAAU,EAAE,CAACT,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAE7D,OAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,IAAIE,KAAK,IAAIE,OAAO,IAAIE,OAAO,GAAG;EAClE;EAEEE,SAASA,CAACC,KAAY,EAAEC,OAAc,EAACC,GAAU;IAC/C,MAAMC,MAAM,GAAS,IAAIC,IAAI,EAAE;IACjC,MAAMC,YAAY,GAAS,IAAID,IAAI,CAACD,MAAM,CAACG,OAAO,EAAE,GAAGL,OAAO,GAAG,KAAK,CAAC;IAEvE,MAAMM,WAAW,GAAG;MAClBP,KAAK,EAAEA,KAAK;MACZQ,UAAU,EAAE,IAAI,CAACzB,UAAU,CAACsB,YAAY,CAAC;MACzCH,GAAG,EAAEA;KACN;IAED,IAAI,CAACvB,UAAU,CAAC8B,IAAI,CAACjC,WAAW,CAACM,GAAG,GAAG,MAAM,EAAEyB,WAAW,CAAC,CAACG,SAAS,CAClEC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;IAClD,CAAC,CACF;EAED;EAEAG,sBAAsBA,CAACC,WAAmB;IACxC,MAAMC,GAAG,GAAGxC,WAAW,CAACM,GAAG,GAAG,iBAAiBiC,WAAW,EAAE;IAC5D,OAAO,IAAI,CAACE,IAAI,CAACpC,GAAG,CAACmC,GAAG,CAAC;EAC3B;;SAxCWvC,UAAU;;mBAAVA,MAAU,EAAAyC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV5C,MAAU;EAAA6C,OAAA,EAAV7C,MAAU,CAAA8C,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}